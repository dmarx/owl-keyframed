"""
The following code is currently faililng tests. here's the error emitted by CI

```python
    def test_curve():
        li = LinearInterpolator()
        kf1 = Keyframe(0.0, 0.0)
        kf2 = Keyframe(1.0, 1.0)
        kf3 = Keyframe(2.0, 0.0)
        curve = Curve([kf1, kf2, kf3], li)
        assert curve.evaluate(1.0) == 1.0
        assert curve.evaluate(2.0) == 0.0
        curve.add_keyframe(Keyframe(1.5, 0.5))
>       assert curve.evaluate(1.25) == 0.25
E       assert 0.75 == 0.25
E        +  where 0.75 = <bound method Curve.evaluate of <keyframed.Curve object at 0x7fb3e00a5880>>(1.25)
E        +    where <bound method Curve.evaluate of <keyframed.Curve object at 0x7fb3e00a5880>> = <keyframed.Curve object at 0x7fb3e00a5880>.evaluate

test_keyframed.py:41: AssertionError
=========================== short test summary info ============================
FAILED test_keyframed.py::test_cubic_interpolator - assert 0.625 == 0.5
 +  where 0.625 = <bound method CubicInterpolator.interpolate of <keyframed.CubicInterpolator object at 0x7fb3e004e280>>(0.5, (0.0, 0.0), (1.0, 1.0))
 +    where <bound method CubicInterpolator.interpolate of <keyframed.CubicInterpolator object at 0x7fb3e004e280>> = <keyframed.CubicInterpolator object at 0x7fb3e004e280>.interpolate
FAILED test_keyframed.py::test_bezier_interpolator - NameError: name 'p2' is not defined
FAILED test_keyframed.py::test_curve - assert 0.75 == 0.25
 +  where 0.75 = <bound method Curve.evaluate of <keyframed.Curve object at 0x7fb3e00a5880>>(1.25)
 +    where <bound method Curve.evaluate of <keyframed.Curve object at 0x7fb3e00a5880>> = <keyframed.Curve object at 0x7fb3e00a5880>.evaluate
========================= 3 failed, 2 passed in 0.06s ==========================
Error: Process completed with exit code 1.
```
Please modify the code below to account for this bug (and any others you identify).
"""

import json
from typing import List, Tuple

class Keyframe:
    """
    A `Keyframe` represents a point on a curve at a specific time. It consists of a time value and a value for the curve at that time.
    """
    def __init__(self, time: float, value: float):
        self.time = time
        self.value = value

class Interpolator:
    """
    An `Interpolator` defines how the curve should be interpolated between keyframes.
    """
    def __init__(self):
        pass

    def interpolate(self, t: float, p0: Tuple[float, float], p1: Tuple[float, float]) -> float:
        """
        Interpolate between two points.

        Args:
            t (float): The interpolation factor.
            p0 (Tuple[float, float]): The first point.
            p1 (Tuple[float, float]): The second point.

        Returns:
            float: The interpolated value.
        """
        pass

class LinearInterpolator(Interpolator):
    """
    A linear interpolator.
    """
    def interpolate(self, t: float, p0: Tuple[float, float], p1: Tuple[float, float]) -> float:
        return p0[1] * (1.0 - t) + p1[1] * t

class Curve:
    """
    A `Curve` is a collection of keyframes and an interpolator. It represents a complete curve.
    """
    def __init__(self, keyframes: List[Keyframe], interpolator: Interpolator):
        self.keyframes = keyframes
        self.interpolator = interpolator

    def evaluate(self, time: float) -> float:
        """
        Evaluate the curve at a specific time.

        Args:
            time (float): The time to evaluate the curve at.

        Returns:
            float: The value of the curve at the given time.
        """
        if time <= self.keyframes[0].time:
            return self.keyframes[0].value
        if time >= self.keyframes[-1].time:
            return self.keyframes[-1].value
        for i in range(len(self.keyframes) - 1):
            if time >= self.keyframes[i].time and time <= self.keyframes[i + 1].time:
                t = (time - self.keyframes[i].time) / (self.keyframes[i + 1].time - self.keyframes[i].time)
                return self.interpolator.interpolate(t, (self.keyframes[i].time, self.keyframes[i].value), (self.keyframes[i + 1].time, self.keyframes[i + 1].value))

    def add_keyframe(self, keyframe: Keyframe):
        """
        Add a keyframe to the curve.

        Args:
            keyframe (Keyframe): The keyframe to add.
        """
        self.keyframes.append(keyframe)
        self.keyframes.sort(key=lambda kf: kf.time)

    def remove_keyframe(self, index: int):
        """
        Remove a keyframe from the curve.

        Args:
            index (int): The index of the keyframe to remove.
        """
        del self.keyframes[index]

    def to_dict(self) -> dict:
        """
        Serialize the curve to a dictionary.

        Returns:
            dict: The serialized curve.
        """
        return {
            "keyframes": [{"time": kf.time, "value": kf.value} for kf in self.keyframes],
            "interpolator": {"type": type(self.interpolator).__name__, "params": self.interpolator.__dict__},
        }

    @classmethod
    def from_dict(cls, data: dict) -> 'Curve':
        """
        Deserialize a curve from a dictionary.

        Args:
            data (dict): The serialized curve.

        Returns:
            Curve: The deserialized curve.
        """
        interpolator_type = globals()[data["interpolator"]["type"]]
        interpolator_params = data["interpolator"]["params"]
        interpolator = interpolator_type(**interpolator_params)
        keyframes = [Keyframe(kf["time"], kf["value"]) for kf in data["keyframes"]]
        return cls(keyframes, interpolator)


